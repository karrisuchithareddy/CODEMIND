//SUM OF THE GIVEN NUMBERS (C++ APPROACH)
//1ST APPROACH
#include<iostream>
using namespace std;
int main(){
    int n,n1,n2;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>n1>>n2;
        cout<<n1+n2<<endl;
    }
}
//2ND APPROACH
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,a[20],b,c,d;
    cin>>n;
    for(int i=0;i<n*2;i++){
        cin>>a[i];
    }
    for(int i=0;i<n*2;i++){
        b=a[i];
        i++;
        c=a[i];
        d=b+c;
        cout<<d<<endl;
    }
}

//PERFECT SQUARE ROOT OR NOT (C++ APPROACH)
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,a;
    cin>>n;
    if(n>=0){
     a=sqrt(n);
     if(a*a==n){
         cout<<"True"<<endl;
     }
     else{
         cout<<"False"<<endl;
     }
    }
}

//REVERSE OF A NUMBER (C++ APPROACH)
#include<bits/stdc++.h>
using namespace std;
int main(){
    int N,rev=0;
    cin>>N;
    while(N!=0){
        rev=rev*10+N%10;
        N=N/10;
    }
    cout<<rev<<endl;
}

//LARGEST DIGIT (C++ APPROACH)
#include<bits/stdc++.h>
using namespace std;
int main(){
    int N,rem,large=0;
    cin>>N;
    while(N>0){
        rem=N%10;
        if(large<rem){
            large=rem;
        }
        N=N/10;
    }
    cout<<large<<endl;
}

//UGLY NUMBER (A number is said to be ugly whose prime factors only include 2,3,5 only) (C++ APPROACH)
#include<iostream>
using namespace std;
int main()
{
    unsigned long long n;
    cin>>n;
    if(n==1)
    {
        cout<<"Ugly Number"<<endl;
    }
    else if((n%2==0||n%3==0||n%5==0)&&(n%5!=0)&&(n%7!=0))
    {
        cout<<"Ugly Number"<<endl;
    }

    else
    {
        cout<<"Not Ugly Number"<<endl;
    }
}
